class Data {    constructor(students, courses) {        this.students = students;        this.courses = courses;    }}let dataCollection = null;exports.initialize = function initialize() {    return new Promise(function (resolve, reject) {        const fs = require('fs');        let studentDataFromFile = null;        let courseDataFromFile = null;        fs.readFile('./data/students.json', 'utf8', function (err, dataFromSomeFile) {            if (err) {                //console.log(err); // or reject the promise (if used in a promise)                reject(err);                return; // exit the function            }            try {                studentDataFromFile = JSON.parse(dataFromSomeFile); // convert the JSON from the file into an array of objects            }            catch (error) {                reject("students.json: " + error);                return;            }            //console.log(data);            fs.readFile('./data/courses.json', 'utf8', function (err, dataFromSomeFile) {                if (err) {                    //console.log(err); // or reject the promise (if used in a promise)                    reject(err);                    return; // exit the function                }                try {                    courseDataFromFile = JSON.parse(dataFromSomeFile); // convert the JSON from the file into an array of objects                }                catch (error) {                    reject("courses.json: " + error);                    return;                }                //console.log(data);                dataCollection = new Data(studentDataFromFile, courseDataFromFile);                exports.dataCollection = dataCollection;                resolve(dataCollection);                //console.log(dataCollection.students.length);            });        });    });}exports.getAllStudents = function getAllStudents() {    return new Promise(function (resolve, reject) {        if (dataCollection.students.length == 0) {            reject("no results returned");        }        else {            resolve(dataCollection.students);        }    });}exports.getTAs = function getTAs() {    return new Promise(function (resolve, reject) {        let result = dataCollection.students.filter(function (x) { return x.TA });        if (result.length == 0) {            reject("no results returned");        }        else {            resolve(result);        }    });}exports.getCourses = function getCourses() {    return new Promise(function (resolve, reject) {        if (dataCollection.courses.length == 0) {            reject("no results returned");        }        else {            resolve(dataCollection.courses);        }    });}exports.getStudentsByCourse = function getStudentsByCourse(course) {    return new Promise(function (resolve, reject) {        let result = dataCollection.students.filter(function (x) { return x.course==course });        if (result.length == 0) {            reject("no results returned");        }        else {            resolve(result);        }    });}exports.getStudentByNum = function getStudentByNum(num) {    return new Promise(function (resolve, reject) {        let result = dataCollection.students.filter(function (x) { return x.studentNum==num });        if (result.length == 0) {            reject("no results returned");        }        else {            resolve(result);        }    });}exports.addStudent = function addStudent(studentData){    return new Promise(function (resolve, reject) {        if (typeof studentData.TA === 'undefined') {            studentData.TA = false;        }		else		{            studentData.TA = true;		}		studentData.studentNum = dataCollection.students.length + 1;		dataCollection.students.push(studentData);        resolve(studentData);    });}